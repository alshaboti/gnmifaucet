/*
Package ocstruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/shab/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- ../modules/faucet-configuration.yang
Imported modules were sourced from:
	- /home/shab/yangmodules/yang/experimental/ietf-extracted-YANG-modules/...
	- /home/shab/yangmodules/oc-yang/standard/ietf/RFC/...
*/
package ocstruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled.
func Unmarshal(data []byte, destStruct ygot.GoStruct) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree)
}

// Device represents the /device YANG schema element.
type Device struct {
	Acls	map[string]*FaucetConfiguration_Acls	`path:"acls" module:"faucet-configuration"`
	Dps	map[string]*FaucetConfiguration_Dps	`path:"dps" module:"faucet-configuration"`
	Version	*uint8	`path:"version" module:"faucet-configuration"`
	Vlans	map[uint16]*FaucetConfiguration_Vlans	`path:"vlans" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}


// NewAcls creates a new entry in the Acls list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewAcls(AclName string) (*FaucetConfiguration_Acls, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Acls == nil {
		t.Acls = make(map[string]*FaucetConfiguration_Acls)
	}

	key := AclName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Acls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Acls", key)
	}

	t.Acls[key] = &FaucetConfiguration_Acls{
		AclName: &AclName,
	}

	return t.Acls[key], nil
}

// NewDps creates a new entry in the Dps list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewDps(DpName string) (*FaucetConfiguration_Dps, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dps == nil {
		t.Dps = make(map[string]*FaucetConfiguration_Dps)
	}

	key := DpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dps", key)
	}

	t.Dps[key] = &FaucetConfiguration_Dps{
		DpName: &DpName,
	}

	return t.Dps[key], nil
}

// NewVlans creates a new entry in the Vlans list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewVlans(Vid uint16) (*FaucetConfiguration_Vlans, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlans == nil {
		t.Vlans = make(map[uint16]*FaucetConfiguration_Vlans)
	}

	key := Vid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlans[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlans", key)
	}

	t.Vlans[key] = &FaucetConfiguration_Vlans{
		Vid: &Vid,
	}

	return t.Vlans[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls represents the /faucet-configuration/acls YANG schema element.
type FaucetConfiguration_Acls struct {
	AclName	*string	`path:"acl-name" module:"faucet-configuration"`
	Acle	map[string]*FaucetConfiguration_Acls_Acle	`path:"acle" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls) IsYANGGoStruct() {}


// NewAcle creates a new entry in the Acle list of the
// FaucetConfiguration_Acls struct. The keys of the list are populated from the input
// arguments.
func (t *FaucetConfiguration_Acls) NewAcle(AcleName string) (*FaucetConfiguration_Acls_Acle, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Acle == nil {
		t.Acle = make(map[string]*FaucetConfiguration_Acls_Acle)
	}

	key := AcleName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Acle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Acle", key)
	}

	t.Acle[key] = &FaucetConfiguration_Acls_Acle{
		AcleName: &AcleName,
	}

	return t.Acle[key], nil
}

// ΛListKeyMap returns the keys of the FaucetConfiguration_Acls struct, which is a YANG list entry.
func (t *FaucetConfiguration_Acls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AclName == nil {
		return nil, fmt.Errorf("nil value for key AclName")
	}

	return map[string]interface{}{
		"acl-name": *t.AclName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls_Acle represents the /faucet-configuration/acls/acle YANG schema element.
type FaucetConfiguration_Acls_Acle struct {
	AcleName	*string	`path:"acle-name" module:"faucet-configuration"`
	Actions	*string	`path:"actions" module:"faucet-configuration"`
	Match	*FaucetConfiguration_Acls_Acle_Match	`path:"match" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls_Acle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls_Acle) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the FaucetConfiguration_Acls_Acle struct, which is a YANG list entry.
func (t *FaucetConfiguration_Acls_Acle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AcleName == nil {
		return nil, fmt.Errorf("nil value for key AcleName")
	}

	return map[string]interface{}{
		"acle-name": *t.AcleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls_Acle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls_Acle"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls_Acle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls_Acle_Match represents the /faucet-configuration/acls/acle/match YANG schema element.
type FaucetConfiguration_Acls_Acle_Match struct {
	Ethacl	*FaucetConfiguration_Acls_Acle_Match_Ethacl	`path:"ethacl" module:"faucet-configuration"`
	Ipv4Acl	*FaucetConfiguration_Acls_Acle_Match_Ipv4Acl	`path:"ipv4acl" module:"faucet-configuration"`
	Tcpacl	*FaucetConfiguration_Acls_Acle_Match_Tcpacl	`path:"tcpacl" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls_Acle_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls_Acle_Match) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls_Acle_Match) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls_Acle_Match"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls_Acle_Match) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls_Acle_Match_Ethacl represents the /faucet-configuration/acls/acle/match/ethacl YANG schema element.
type FaucetConfiguration_Acls_Acle_Match_Ethacl struct {
	DestinationMacAddress	*string	`path:"destination-mac-address" module:"faucet-configuration"`
	DestinationMacAddressMask	*string	`path:"destination-mac-address-mask" module:"faucet-configuration"`
	Ethertype	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union	`path:"ethertype" module:"faucet-configuration"`
	SourceMacAddress	*string	`path:"source-mac-address" module:"faucet-configuration"`
	SourceMacAddressMask	*string	`path:"source-mac-address-mask" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls_Acle_Match_Ethacl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls_Acle_Match_Ethacl) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls_Acle_Match_Ethacl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls_Acle_Match_Ethacl"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls_Acle_Match_Ethacl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /faucet-configuration/acls/acle/match/ethacl/ethertype within the YANG schema.
type FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union interface {
	Is_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union()
}

// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype is used when /faucet-configuration/acls/acle/match/ethacl/ethertype
// is to be set to a E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype value.
type FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype struct {
	E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype	E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
}

// Is_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union ensures that FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
// implements the FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union interface.
func (*FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype) Is_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union() {}

// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_Uint16 is used when /faucet-configuration/acls/acle/match/ethacl/ethertype
// is to be set to a uint16 value.
type FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_Uint16 struct {
	Uint16	uint16
}

// Is_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union ensures that FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_Uint16
// implements the FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union interface.
func (*FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_Uint16) Is_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union() {}

// To_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *FaucetConfiguration_Acls_Acle_Match_Ethacl) To_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union(i interface{}) (FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype:
		return &FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype{v}, nil
	case uint16:
		return &FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_Union, unknown union type, got: %T, want any of [E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype, uint16]", i, i)
	}
}


// FaucetConfiguration_Acls_Acle_Match_Ipv4Acl represents the /faucet-configuration/acls/acle/match/ipv4acl YANG schema element.
type FaucetConfiguration_Acls_Acle_Match_Ipv4Acl struct {
	DestinationIpv4	*string	`path:"destination-ipv4" module:"faucet-configuration"`
	DestinationIpv4Network	*string	`path:"destination-ipv4-network" module:"faucet-configuration"`
	Flags	interface{}	`path:"flags" module:"faucet-configuration"`
	Identification	*uint16	`path:"identification" module:"faucet-configuration"`
	Ihl	*uint8	`path:"ihl" module:"faucet-configuration"`
	Offset	*uint16	`path:"offset" module:"faucet-configuration"`
	SourceIpv4	*string	`path:"source-ipv4" module:"faucet-configuration"`
	SourceIpv4Network	*string	`path:"source-ipv4-network" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls_Acle_Match_Ipv4Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls_Acle_Match_Ipv4Acl) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls_Acle_Match_Ipv4Acl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls_Acle_Match_Ipv4Acl"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls_Acle_Match_Ipv4Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Acls_Acle_Match_Tcpacl represents the /faucet-configuration/acls/acle/match/tcpacl YANG schema element.
type FaucetConfiguration_Acls_Acle_Match_Tcpacl struct {
	AcknowledgementNumber	*uint32	`path:"acknowledgement-number" module:"faucet-configuration"`
	DataOffset	*uint8	`path:"data-offset" module:"faucet-configuration"`
	Flags	interface{}	`path:"flags" module:"faucet-configuration"`
	Options	*uint32	`path:"options" module:"faucet-configuration"`
	Port	*uint16	`path:"port" module:"faucet-configuration"`
	Reserved	*uint8	`path:"reserved" module:"faucet-configuration"`
	SequenceNumber	*uint32	`path:"sequence-number" module:"faucet-configuration"`
	UrgentPointer	*uint16	`path:"urgent-pointer" module:"faucet-configuration"`
	WindowSize	*uint16	`path:"window-size" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Acls_Acle_Match_Tcpacl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Acls_Acle_Match_Tcpacl) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Acls_Acle_Match_Tcpacl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Acls_Acle_Match_Tcpacl"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Acls_Acle_Match_Tcpacl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Dps represents the /faucet-configuration/dps YANG schema element.
type FaucetConfiguration_Dps struct {
	DpId	*string	`path:"dp-id" module:"faucet-configuration"`
	DpName	*string	`path:"dp-name" module:"faucet-configuration"`
	Hardware	*string	`path:"hardware" module:"faucet-configuration"`
	Interfaces	map[uint8]*FaucetConfiguration_Dps_Interfaces	`path:"interfaces" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Dps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Dps) IsYANGGoStruct() {}


// NewInterfaces creates a new entry in the Interfaces list of the
// FaucetConfiguration_Dps struct. The keys of the list are populated from the input
// arguments.
func (t *FaucetConfiguration_Dps) NewInterfaces(Number uint8) (*FaucetConfiguration_Dps_Interfaces, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interfaces == nil {
		t.Interfaces = make(map[uint8]*FaucetConfiguration_Dps_Interfaces)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interfaces[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interfaces", key)
	}

	t.Interfaces[key] = &FaucetConfiguration_Dps_Interfaces{
		Number: &Number,
	}

	return t.Interfaces[key], nil
}

// ΛListKeyMap returns the keys of the FaucetConfiguration_Dps struct, which is a YANG list entry.
func (t *FaucetConfiguration_Dps) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DpName == nil {
		return nil, fmt.Errorf("nil value for key DpName")
	}

	return map[string]interface{}{
		"dp-name": *t.DpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Dps) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Dps"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Dps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Dps_Interfaces represents the /faucet-configuration/dps/interfaces YANG schema element.
type FaucetConfiguration_Dps_Interfaces struct {
	AclIn	*string	`path:"acl-in" module:"faucet-configuration"`
	Description	*string	`path:"description" module:"faucet-configuration"`
	Name	*string	`path:"name" module:"faucet-configuration"`
	Number	*uint8	`path:"number" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Dps_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Dps_Interfaces) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the FaucetConfiguration_Dps_Interfaces struct, which is a YANG list entry.
func (t *FaucetConfiguration_Dps_Interfaces) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Number == nil {
		return nil, fmt.Errorf("nil value for key Number")
	}

	return map[string]interface{}{
		"number": *t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Dps_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Dps_Interfaces"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Dps_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// FaucetConfiguration_Vlans represents the /faucet-configuration/vlans YANG schema element.
type FaucetConfiguration_Vlans struct {
	MaxHosts	*uint16	`path:"max_hosts" module:"faucet-configuration"`
	Name	*string	`path:"name" module:"faucet-configuration"`
	Vid	*uint16	`path:"vid" module:"faucet-configuration"`
}

// IsYANGGoStruct ensures that FaucetConfiguration_Vlans implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*FaucetConfiguration_Vlans) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the FaucetConfiguration_Vlans struct, which is a YANG list entry.
func (t *FaucetConfiguration_Vlans) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vid == nil {
		return nil, fmt.Errorf("nil value for key Vid")
	}

	return map[string]interface{}{
		"vid": *t.Vid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *FaucetConfiguration_Vlans) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["FaucetConfiguration_Vlans"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *FaucetConfiguration_Vlans) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype is a derived int64 type which is used to represent
// the enumerated node FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype. An additional value named
// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype int64

// IsYANGGoEnum ensures that FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype implements the yang.GoEnum
// interface. This ensures that FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype can be identified as a
// mapped type for a YANG enumeration.
func (E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype.
func (E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_UNSET corresponds to the value UNSET of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_UNSET E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 0
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipv4 corresponds to the value ipv4 of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipv4 E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 2049
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_arp corresponds to the value arp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_arp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 2055
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_wlan corresponds to the value wlan of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_wlan E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 2115
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_srp corresponds to the value srp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_srp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 8939
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_trill corresponds to the value trill of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_trill E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 8948
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_decnet corresponds to the value decnet of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_decnet E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 24580
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_rarp corresponds to the value rarp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_rarp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 32822
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_appletalk corresponds to the value appletalk of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_appletalk E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 32924
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_aarp corresponds to the value aarp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_aarp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 33012
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_vlan corresponds to the value vlan of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_vlan E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 33025
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipx corresponds to the value ipx of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipx E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 33080
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_qnx corresponds to the value qnx of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_qnx E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 33285
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipv6 corresponds to the value ipv6 of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ipv6 E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34526
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_efc corresponds to the value efc of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_efc E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34825
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_esp corresponds to the value esp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_esp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34826
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_cobranet corresponds to the value cobranet of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_cobranet E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34842
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mpls_unicast corresponds to the value mpls_unicast of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mpls_unicast E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34888
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mpls_multicast corresponds to the value mpls_multicast of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mpls_multicast E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34889
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pppoe_discovery corresponds to the value pppoe_discovery of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pppoe_discovery E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34916
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pppoe_session corresponds to the value pppoe_session of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pppoe_session E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34917
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_intel_ans corresponds to the value intel_ans of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_intel_ans E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34926
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_jumbo_frames corresponds to the value jumbo_frames of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_jumbo_frames E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34929
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_homeplug corresponds to the value homeplug of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_homeplug E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34940
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_eap corresponds to the value eap of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_eap E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34959
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_profinet corresponds to the value profinet of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_profinet E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34963
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_hyperscsi corresponds to the value hyperscsi of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_hyperscsi E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34971
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_aoe corresponds to the value aoe of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_aoe E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34979
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ethercat corresponds to the value ethercat of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ethercat E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34981
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_provider_bridging corresponds to the value provider_bridging of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_provider_bridging E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34985
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ethernet_powerlink corresponds to the value ethernet_powerlink of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_ethernet_powerlink E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 34988
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_goose corresponds to the value goose of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_goose E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35001
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_gse corresponds to the value gse of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_gse E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35002
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_sv corresponds to the value sv of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_sv E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35003
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_lldp corresponds to the value lldp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_lldp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35021
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_sercos corresponds to the value sercos of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_sercos E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35022
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_wsmp corresponds to the value wsmp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_wsmp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35037
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_homeplug_av_mme corresponds to the value homeplug_av_mme of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_homeplug_av_mme E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35042
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mrp corresponds to the value mrp of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_mrp E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35044
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_macsec corresponds to the value macsec of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_macsec E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35046
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pbb corresponds to the value pbb of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_pbb E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35048
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_cfm corresponds to the value cfm of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_cfm E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35075
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_fcoe corresponds to the value fcoe of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_fcoe E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35079
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_fcoe_ip corresponds to the value fcoe_ip of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_fcoe_ip E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35093
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_roce corresponds to the value roce of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_roce E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35094
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_tte corresponds to the value tte of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_tte E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35102
	// FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_hsr corresponds to the value hsr of FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype
	FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype_hsr E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype = 35120
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype": {
		2049: {Name: "ipv4"},
		2055: {Name: "arp"},
		2115: {Name: "wlan"},
		8939: {Name: "srp"},
		8948: {Name: "trill"},
		24580: {Name: "decnet"},
		32822: {Name: "rarp"},
		32924: {Name: "appletalk"},
		33012: {Name: "aarp"},
		33025: {Name: "vlan"},
		33080: {Name: "ipx"},
		33285: {Name: "qnx"},
		34526: {Name: "ipv6"},
		34825: {Name: "efc"},
		34826: {Name: "esp"},
		34842: {Name: "cobranet"},
		34888: {Name: "mpls-unicast"},
		34889: {Name: "mpls-multicast"},
		34916: {Name: "pppoe-discovery"},
		34917: {Name: "pppoe-session"},
		34926: {Name: "intel-ans"},
		34929: {Name: "jumbo-frames"},
		34940: {Name: "homeplug"},
		34959: {Name: "eap"},
		34963: {Name: "profinet"},
		34971: {Name: "hyperscsi"},
		34979: {Name: "aoe"},
		34981: {Name: "ethercat"},
		34985: {Name: "provider-bridging"},
		34988: {Name: "ethernet-powerlink"},
		35001: {Name: "goose"},
		35002: {Name: "gse"},
		35003: {Name: "sv"},
		35021: {Name: "lldp"},
		35022: {Name: "sercos"},
		35037: {Name: "wsmp"},
		35042: {Name: "homeplug-av-mme"},
		35044: {Name: "mrp"},
		35046: {Name: "macsec"},
		35048: {Name: "pbb"},
		35075: {Name: "cfm"},
		35079: {Name: "fcoe"},
		35093: {Name: "fcoe-ip"},
		35094: {Name: "roce"},
		35102: {Name: "tte"},
		35120: {Name: "hsr"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x6f, 0xa3, 0x48,
		0x12, 0xfe, 0xee, 0x5f, 0x61, 0x21, 0x9d, 0x94, 0xe8, 0xc2, 0xf9, 0x25, 0x76, 0x76, 0xe3, 0x2f,
		0xa7, 0xec, 0xce, 0x44, 0xb7, 0xba, 0xd9, 0xbd, 0xd3, 0xde, 0x6a, 0xbf, 0x78, 0xac, 0xa8, 0x07,
		0xda, 0x36, 0x1a, 0x0c, 0x1c, 0xb4, 0x93, 0xc9, 0x65, 0xf8, 0xef, 0x27, 0xc0, 0x2f, 0x60, 0x43,
		0x53, 0xfd, 0x82, 0x1d, 0xdb, 0xf5, 0x25, 0x93, 0xd8, 0x4d, 0x03, 0xd5, 0x55, 0xcf, 0x53, 0x5d,
		0xfd, 0x74, 0xcf, 0x5b, 0xab, 0xdd, 0x6e, 0xb7, 0x8d, 0xdf, 0xc8, 0x82, 0x1a, 0xa3, 0xb6, 0x61,
		0xd3, 0x67, 0xc7, 0xa2, 0xc6, 0x4d, 0xf6, 0xe9, 0x3f, 0x1d, 0xcf, 0x36, 0x46, 0xed, 0xde, 0xea,
		0xcf, 0x9f, 0x7d, 0x6f, 0xea, 0xcc, 0x8c, 0x51, 0xbb, 0xbb, 0xfa, 0xe0, 0x83, 0x13, 0x1a, 0xa3,
		0x76, 0xd6, 0x45, 0xfa, 0x01, 0xb1, 0xdc, 0xa8, 0xf0, 0x49, 0xa1, 0xf3, 0xf4, 0xdb, 0x9b, 0xe2,
		0x77, 0xc5, 0x5b, 0x6c, 0x3e, 0xde, 0xbd, 0xd5, 0xe6, 0x8b, 0x7f, 0x87, 0x74, 0xea, 0x7c, 0xdb,
		0xbb, 0x47, 0xe1, 0x3e, 0x53, 0xb2, 0xb4, 0x28, 0x33, 0x2d, 0xdf, 0x9b, 0xee, 0xdc, 0x2e, 0x6d,
		0xf6, 0x1f, 0x7f, 0x19, 0x5a, 0xb4, 0xb4, 0x8b, 0xec, 0x91, 0xe8, 0xeb, 0x8b, 0x1f, 0x26, 0x4f,
		0x65, 0x04, 0xd9, 0xdd, 0x6e, 0xca, 0x1b, 0xfe, 0x83, 0x44, 0x0f, 0xe1, 0x6c, 0xb9, 0xa0, 0x1e,
		0x33, 0x46, 0x6d, 0x16, 0x2e, 0x69, 0x45, 0xc3, 0x5c, 0xab, 0xc2, 0xc3, 0xed, 0xb5, 0x8e, 0x0b,
		0x9f, 0xc4, 0x3b, 0xef, 0xbe, 0x6b, 0xee, 0xbc, 0xd9, 0x4d, 0x2f, 0x7b, 0xf9, 0x8a, 0x77, 0xca,
		0x0d, 0x41, 0xd6, 0xb2, 0xe2, 0x49, 0x57, 0xc3, 0xd1, 0xad, 0xf8, 0xba, 0x6a, 0x58, 0x20, 0xc3,
		0x23, 0x38, 0x4c, 0xd0, 0xe1, 0x12, 0x1e, 0x36, 0xe1, 0xe1, 0x13, 0x1f, 0xc6, 0xf2, 0xe1, 0xac,
		0x18, 0xd6, 0x4d, 0xf7, 0x7f, 0xbc, 0x06, 0x14, 0x66, 0xb9, 0x88, 0x85, 0x8e, 0x37, 0xe3, 0x19,
		0x6d, 0x1d, 0x56, 0x3f, 0x72, 0xda, 0x7c, 0xa2, 0xde, 0x8c, 0xcd, 0x8d, 0x51, 0x7b, 0xcc, 0x7d,
		0x6d, 0xbe, 0xd9, 0xd3, 0x9e, 0x7e, 0x75, 0xbc, 0xda, 0xf1, 0x01, 0xba, 0xd8, 0x5e, 0xf3, 0x3f,
		0x89, 0xbb, 0xa4, 0xfb, 0x08, 0x51, 0xd9, 0xfe, 0x31, 0x24, 0x16, 0x73, 0x7c, 0xef, 0x83, 0x33,
		0x73, 0x58, 0x02, 0x46, 0xdd, 0xda, 0xeb, 0xe2, 0x1b, 0xc0, 0x2b, 0x92, 0x6f, 0x8d, 0xbf, 0xe2,
		0xdd, 0xa0, 0xc1, 0x77, 0x6c, 0xc9, 0x7d, 0x3b, 0x69, 0xc1, 0xda, 0x97, 0xd8, 0x30, 0x01, 0x1b,
		0x18, 0x24, 0xd5, 0xc1, 0x51, 0x0f, 0xe1, 0xe8, 0xf0, 0x70, 0x54, 0xc5, 0x36, 0x85, 0xe1, 0xe5,
		0xd3, 0x4e, 0xe9, 0x58, 0xf3, 0xf8, 0x47, 0x30, 0x82, 0x6a, 0x1d, 0x40, 0xc4, 0x11, 0x24, 0x1d,
		0x42, 0xd4, 0x31, 0xa4, 0x1d, 0x44, 0xda, 0x51, 0xe4, 0x1d, 0x06, 0x08, 0x1e, 0x35, 0xb6, 0xaf,
		0xe5, 0x35, 0x71, 0x7e, 0x13, 0xe1, 0x39, 0x51, 0xbe, 0x83, 0xf3, 0x9e, 0x14, 0xff, 0x49, 0x92,
		0x84, 0x2c, 0x1f, 0xaa, 0x70, 0x86, 0x00, 0x3f, 0x4a, 0xf1, 0xa4, 0x2e, 0x53, 0x40, 0x79, 0x53,
		0x8b, 0x2d, 0x5a, 0x7a, 0x5a, 0x4d, 0x24, 0xf9, 0x98, 0x33, 0x16, 0x46, 0xf6, 0x52, 0x91, 0x08,
		0x1c, 0x67, 0x17, 0x20, 0x18, 0x23, 0x18, 0xeb, 0x04, 0xe3, 0x06, 0x7c, 0x7b, 0x41, 0x98, 0x35,
		0x87, 0x7b, 0x76, 0xd6, 0x1c, 0xe6, 0xd7, 0x3d, 0xf4, 0xeb, 0xd3, 0xf7, 0xeb, 0xba, 0x6c, 0x75,
		0xd3, 0x90, 0xb2, 0x39, 0xb1, 0x5c, 0xb8, 0x05, 0xd7, 0x03, 0xb5, 0xba, 0xee, 0x46, 0x68, 0x06,
		0x08, 0x9d, 0xb4, 0x42, 0x5d, 0x4c, 0xc6, 0xd5, 0x14, 0x5d, 0x4e, 0xd6, 0xf5, 0x94, 0x5d, 0x50,
		0xd9, 0x15, 0xd5, 0x5d, 0x52, 0x90, 0xf4, 0x81, 0x63, 0x07, 0x75, 0xd5, 0xcd, 0x05, 0x36, 0x8d,
		0x98, 0xe3, 0x91, 0x84, 0xab, 0xcd, 0x05, 0xb1, 0x4c, 0x62, 0xdb, 0x21, 0x8d, 0x22, 0xf1, 0xa1,
		0xd8, 0x56, 0x79, 0xcb, 0x3b, 0xbc, 0x39, 0x48, 0xda, 0x26, 0xea, 0xec, 0x2a, 0x4e, 0xbf, 0xf7,
		0xea, 0x01, 0xb1, 0xbe, 0x52, 0x66, 0x4e, 0x1d, 0xea, 0xda, 0xa2, 0x2f, 0xac, 0x12, 0x06, 0xda,
		0xc2, 0x41, 0x5b, 0x58, 0x94, 0x86, 0x47, 0xd1, 0x3c, 0xc2, 0xfd, 0xc5, 0x42, 0x57, 0xc4, 0x82,
		0xe3, 0x0f, 0xce, 0x5d, 0x38, 0x69, 0x81, 0xac, 0xb3, 0x8b, 0xce, 0x36, 0xf7, 0x9d, 0x97, 0x30,
		0x46, 0x43, 0x0f, 0x3c, 0xfd, 0xdc, 0xeb, 0x60, 0xdc, 0x35, 0xef, 0x89, 0x39, 0x7d, 0x30, 0x1f,
		0x27, 0x6f, 0xfd, 0xf8, 0x6a, 0x54, 0xfc, 0xfb, 0xfa, 0x6d, 0x18, 0x8b, 0x8f, 0xd7, 0xa4, 0xd5,
		0xcc, 0xe8, 0x8a, 0xcc, 0x18, 0x2b, 0xc0, 0xc8, 0x5c, 0x90, 0xe8, 0xab, 0x76, 0x88, 0xcb, 0x7a,
		0x45, 0x9c, 0x43, 0x9c, 0x43, 0x9c, 0x43, 0x9c, 0x3b, 0x28, 0xce, 0x51, 0x36, 0xa7, 0x21, 0x93,
		0x19, 0xda, 0xfc, 0x1c, 0x64, 0xd5, 0x05, 0x22, 0x18, 0x22, 0xd8, 0x59, 0x23, 0x98, 0xac, 0xab,
		0x17, 0xf0, 0xeb, 0x5e, 0xe2, 0xda, 0xd5, 0xa3, 0xcb, 0x81, 0x97, 0x9c, 0xa7, 0x15, 0x5e, 0x7c,
		0xe9, 0x78, 0xac, 0x77, 0x27, 0xe9, 0x6a, 0xf9, 0xb7, 0xbf, 0x53, 0xe8, 0xe2, 0x77, 0xe2, 0xcd,
		0xe4, 0xad, 0xa0, 0x6e, 0x8d, 0xcd, 0x83, 0xc8, 0xac, 0xac, 0x68, 0x46, 0xc1, 0xca, 0xee, 0xd6,
		0xcb, 0x0f, 0xba, 0xfa, 0x53, 0x58, 0x95, 0xd0, 0x14, 0xb7, 0xe5, 0x43, 0x40, 0xbe, 0xbd, 0xfb,
		0x21, 0xb8, 0x1b, 0x0e, 0x6f, 0x87, 0xef, 0x78, 0x18, 0x5a, 0xc7, 0xb9, 0x7a, 0xd2, 0x3a, 0xa0,
		0xd3, 0x68, 0xc0, 0x3e, 0xea, 0x2d, 0x17, 0x34, 0x4c, 0x27, 0x6d, 0x1a, 0x00, 0xb0, 0x37, 0x50,
		0xe8, 0xe3, 0xa3, 0xb7, 0x5c, 0x24, 0x6e, 0x2f, 0x67, 0xfc, 0xf8, 0x24, 0x33, 0xd4, 0x28, 0x4d,
		0x98, 0xf4, 0x94, 0x18, 0x4b, 0xfa, 0xc2, 0x9c, 0x15, 0x73, 0x56, 0x9c, 0x75, 0xe3, 0xac, 0xfb,
		0xc8, 0x98, 0xa6, 0x58, 0x58, 0xac, 0xea, 0x10, 0xd1, 0x0d, 0xd1, 0x0d, 0xd1, 0x0d, 0xd1, 0x4d,
		0x1d, 0xdd, 0xb4, 0x2e, 0x36, 0x3f, 0x78, 0x9e, 0xcf, 0xb2, 0x8c, 0x5a, 0x68, 0xcd, 0x39, 0xb2,
		0xe6, 0x74, 0x41, 0x02, 0x92, 0x0a, 0x26, 0x8d, 0x4e, 0x6e, 0xd9, 0xdc, 0x99, 0x2d, 0xb3, 0x14,
		0xbd, 0x43, 0x2c, 0x37, 0x4a, 0x7e, 0xd0, 0x4e, 0x2a, 0xb7, 0xe9, 0x08, 0x49, 0x24, 0xb2, 0xbb,
		0xb0, 0x70, 0x69, 0xb1, 0x95, 0x86, 0xd8, 0x78, 0x4c, 0x6f, 0xf2, 0x73, 0xfe, 0x1e, 0x4f, 0x0f,
		0x96, 0x1b, 0x25, 0x3f, 0xe8, 0xd3, 0xaf, 0xc9, 0x3d, 0x9e, 0x3e, 0x66, 0xf7, 0xd0, 0xa4, 0xc2,
		0x83, 0x28, 0xff, 0x9d, 0xe0, 0x79, 0x20, 0xa5, 0x18, 0x59, 0x5f, 0x88, 0x92, 0x11, 0x94, 0x8c,
		0x28, 0x46, 0xb1, 0x92, 0x64, 0x24, 0xf1, 0x43, 0x3d, 0x0b, 0xa9, 0x69, 0x4f, 0x17, 0x90, 0xe8,
		0xc8, 0xb9, 0xfb, 0x85, 0xa4, 0x39, 0x52, 0xe1, 0x70, 0x2a, 0x49, 0x4e, 0xe2, 0xe1, 0x27, 0x9b,
		0xe5, 0x5c, 0x5d, 0x25, 0x79, 0xcd, 0xe4, 0xfb, 0xb8, 0x67, 0xde, 0x4f, 0xb2, 0x5f, 0x7b, 0xe9,
		0x3f, 0xd9, 0xef, 0xfd, 0x71, 0xd7, 0x1c, 0xac, 0x7f, 0x1f, 0x8e, 0xbb, 0xe6, 0x70, 0x72, 0xfd,
		0xf9, 0xf3, 0xdf, 0xae, 0xdf, 0x6e, 0x63, 0xf1, 0x0b, 0xaf, 0xfe, 0x32, 0xfe, 0xfc, 0x39, 0x78,
		0xfb, 0x2d, 0x4e, 0x7e, 0x7e, 0x8a, 0x27, 0x7f, 0xbd, 0xfe, 0xfb, 0xe9, 0xcb, 0x4f, 0x3c, 0xca,
		0x5e, 0xfc, 0x50, 0x93, 0xea, 0x64, 0xdd, 0x99, 0x1c, 0x5e, 0x0e, 0x71, 0x62, 0x88, 0x13, 0xc3,
		0x43, 0x60, 0xa6, 0x68, 0x6a, 0x51, 0x99, 0x62, 0x48, 0x47, 0x4f, 0x6d, 0xca, 0x21, 0x19, 0x4a,
		0xbb, 0x21, 0x25, 0xb9, 0x1c, 0x20, 0x1d, 0x5a, 0x3a, 0x42, 0x4c, 0x7b, 0xa8, 0xe9, 0x0a, 0x39,
		0xed, 0xa1, 0xa7, 0x3d, 0x04, 0x9b, 0x08, 0x45, 0xb9, 0x90, 0x94, 0x0c, 0x4d, 0xe5, 0x10, 0x6d,
		0x2e, 0x54, 0x9b, 0x0e, 0x59, 0xc5, 0xd9, 0x83, 0xf6, 0x10, 0xd6, 0x19, 0xca, 0x8d, 0x85, 0xb4,
		0xee, 0xd0, 0x6e, 0x2c, 0xc4, 0x1b, 0x0b, 0xf5, 0x26, 0x43, 0x5e, 0x2d, 0xf4, 0x15, 0x21, 0x40,
		0x7d, 0x86, 0xc3, 0x9f, 0xf1, 0x68, 0x1b, 0x56, 0x95, 0x09, 0x90, 0xf6, 0x09, 0xd1, 0x51, 0x27,
		0x48, 0x9d, 0xd5, 0xcd, 0xae, 0xbf, 0x5f, 0x8d, 0x7b, 0x66, 0x7f, 0xb2, 0xfe, 0xe3, 0x76, 0xdc,
		0x35, 0xfb, 0x93, 0xeb, 0x6b, 0x75, 0x4f, 0x9c, 0x1c, 0x49, 0x55, 0x72, 0x58, 0xf2, 0x93, 0x2c,
		0x60, 0x6b, 0x29, 0x68, 0xaf, 0x2a, 0xb8, 0x9d, 0x92, 0x69, 0x5d, 0xa7, 0x92, 0xf1, 0x0e, 0x24,
		0x18, 0x69, 0x76, 0x56, 0xa0, 0x68, 0x75, 0xdd, 0xd6, 0x36, 0xde, 0x41, 0xa1, 0x60, 0xea, 0x92,
		0x99, 0x82, 0x20, 0x26, 0xbb, 0x1c, 0x57, 0x89, 0xb1, 0x18, 0x70, 0xd6, 0xab, 0xc4, 0x5f, 0x1c,
		0xa6, 0x54, 0x38, 0x95, 0x48, 0xd0, 0x8d, 0x9f, 0x1c, 0x26, 0x2e, 0xd5, 0x6b, 0x06, 0x24, 0x1c,
		0x9b, 0x7a, 0xcc, 0x99, 0x3a, 0x96, 0x1c, 0x76, 0x6e, 0xb3, 0xb2, 0x62, 0x3f, 0x08, 0x1b, 0x08,
		0x1b, 0x67, 0x0d, 0x1b, 0xd2, 0xbb, 0x1e, 0x14, 0x76, 0x3b, 0x28, 0xee, 0x72, 0x50, 0xc8, 0x45,
		0x75, 0xec, 0x6a, 0xd0, 0x55, 0x1a, 0xd1, 0xb4, 0x8b, 0x41, 0xa7, 0x6c, 0x5e, 0x61, 0x92, 0xac,
		0x65, 0xb7, 0x82, 0x6e, 0xd3, 0x6a, 0xd8, 0x9d, 0xa0, 0xd5, 0xbc, 0x17, 0x24, 0x69, 0x77, 0xe6,
		0xae, 0x02, 0x09, 0xcf, 0x5d, 0x64, 0x5e, 0x64, 0xde, 0xf3, 0x67, 0xde, 0x1f, 0x15, 0x88, 0x77,
		0x88, 0xc4, 0xab, 0xc6, 0x0e, 0x43, 0x24, 0xde, 0xc6, 0x88, 0xb7, 0x8b, 0xac, 0x7b, 0x0c, 0xd6,
		0xf5, 0xa7, 0xd3, 0x88, 0x32, 0x79, 0xe2, 0x5d, 0x5d, 0x8f, 0xdc, 0x8b, 0xdc, 0x8b, 0xb3, 0x5e,
		0x9c, 0xf5, 0x36, 0xc8, 0x10, 0x7d, 0x9c, 0xf6, 0xe2, 0xb4, 0xf7, 0xfc, 0x08, 0x78, 0xb5, 0x49,
		0x51, 0x4d, 0xf9, 0x9f, 0xef, 0x04, 0x45, 0xff, 0x97, 0x4d, 0xc4, 0x28, 0xfa, 0xaf, 0xf7, 0x76,
		0x14, 0xfd, 0x9f, 0x1a, 0x3e, 0x2a, 0xeb, 0xfd, 0x77, 0xfa, 0x41, 0xa9, 0x3f, 0x4e, 0x58, 0xce,
		0x51, 0xea, 0x9f, 0xcb, 0x04, 0xf4, 0xa9, 0xfc, 0xcb, 0x3a, 0x45, 0x81, 0x3f, 0x0a, 0xfc, 0x8f,
		0x1a, 0x80, 0x8a, 0x93, 0x85, 0x63, 0x09, 0xfc, 0x75, 0x06, 0x68, 0x83, 0x81, 0xaa, 0x7b, 0xa6,
		0x89, 0xb2, 0xfe, 0xf7, 0x14, 0xd8, 0x8d, 0x05, 0x78, 0x93, 0x81, 0xae, 0x16, 0xf0, 0x1a, 0x4a,
		0x37, 0x6d, 0x94, 0xf5, 0xab, 0x76, 0x88, 0xb2, 0x7e, 0x1d, 0x7e, 0x7c, 0x79, 0xb2, 0xfe, 0xe2,
		0xec, 0xad, 0x53, 0xc6, 0x73, 0x28, 0xe6, 0xd7, 0x6a, 0x63, 0x03, 0xcf, 0x4c, 0x2a, 0xb7, 0x53,
		0xb3, 0x87, 0x26, 0xfd, 0x12, 0x3c, 0x0f, 0x1e, 0x0e, 0x7b, 0x6a, 0x12, 0xb3, 0x02, 0xa9, 0x43,
		0x93, 0x56, 0xd7, 0xe1, 0x99, 0x49, 0x78, 0x66, 0x92, 0x62, 0x14, 0x0b, 0x9f, 0x99, 0x44, 0xac,
		0xaf, 0x9e, 0xff, 0xe2, 0x52, 0x7b, 0x46, 0x93, 0xd7, 0x30, 0xbd, 0xe5, 0xe2, 0x0b, 0x0d, 0xe5,
		0x8b, 0x83, 0x15, 0xfd, 0xa1, 0xaa, 0x01, 0x8b, 0x84, 0x67, 0xaf, 0x6a, 0xb8, 0xed, 0x2b, 0x2c,
		0xa4, 0xfc, 0x80, 0xaa, 0x06, 0xb9, 0x6e, 0x50, 0xcb, 0xdf, 0xb8, 0x69, 0x07, 0xfd, 0xfb, 0xc1,
		0xfd, 0xdd, 0x0f, 0xfd, 0x7b, 0x54, 0x36, 0xe8, 0xcb, 0xde, 0x45, 0x8e, 0xeb, 0x22, 0x8c, 0x98,
		0xaa, 0xfa, 0xc2, 0x7c, 0x27, 0x48, 0xc7, 0x48, 0xc7, 0x28, 0xf0, 0xe7, 0xb8, 0x3a, 0x0a, 0xfc,
		0x15, 0x29, 0x03, 0x05, 0xfe, 0x8d, 0x99, 0xb6, 0x87, 0x2c, 0x7c, 0x14, 0x16, 0xc6, 0xb3, 0x30,
		0x90, 0x79, 0x91, 0x79, 0xeb, 0x46, 0xff, 0xc2, 0xcf, 0xc2, 0xf0, 0x83, 0x04, 0x59, 0x15, 0x60,
		0x62, 0xdd, 0x01, 0x02, 0x05, 0x02, 0x05, 0x56, 0xcc, 0xb0, 0x62, 0x86, 0x15, 0x33, 0xac, 0x98,
		0x61, 0xae, 0x2e, 0x4a, 0xc3, 0x81, 0x1f, 0x2a, 0x94, 0xca, 0xd2, 0xab, 0x71, 0xf7, 0xcf, 0x65,
		0xd3, 0xef, 0x59, 0xef, 0xfe, 0x49, 0x3c, 0x5c, 0x6e, 0x6d, 0xb6, 0x8d, 0x3b, 0x71, 0x91, 0x81,
		0x4f, 0x80, 0x81, 0x71, 0x23, 0xee, 0xd1, 0xc8, 0x37, 0xa4, 0x11, 0x0d, 0x9f, 0xa9, 0x2d, 0x4f,
		0xc0, 0x9b, 0x1e, 0x70, 0x16, 0x8c, 0xb3, 0x60, 0x5c, 0xa8, 0xe2, 0xb8, 0x3a, 0x2e, 0x54, 0x21,
		0x05, 0xbf, 0x57, 0x0a, 0xee, 0x0f, 0x91, 0x80, 0x8f, 0x42, 0xc0, 0x11, 0xfd, 0xef, 0x92, 0x7a,
		0x16, 0x55, 0x56, 0x73, 0xee, 0x76, 0x84, 0x74, 0x8c, 0x74, 0x8c, 0x45, 0x69, 0x9e, 0xaf, 0x63,
		0x51, 0x1a, 0xf9, 0x18, 0x8b, 0xd2, 0x48, 0xcb, 0x65, 0x66, 0x5b, 0x86, 0x33, 0xea, 0x31, 0x33,
		0xf0, 0x1d, 0x8f, 0xa9, 0xb0, 0xf2, 0x4e, 0x3f, 0x48, 0xca, 0x48, 0xca, 0x78, 0x62, 0x24, 0xcf,
		0xd7, 0xb1, 0x4e, 0x8d, 0xa4, 0x8c, 0x75, 0x6a, 0xe4, 0xe3, 0x1d, 0xb3, 0xbd, 0x38, 0x9e, 0xed,
		0xbf, 0x98, 0x91, 0xf3, 0x3f, 0x2a, 0x4f, 0xc6, 0xf9, 0x4e, 0x90, 0x89, 0x91, 0x89, 0x91, 0x89,
		0x91, 0x89, 0x91, 0x89, 0x91, 0x89, 0x91, 0x89, 0x4f, 0xf6, 0x78, 0x12, 0xa1, 0xe3, 0x38, 0xda,
		0x72, 0xa7, 0x93, 0xfc, 0x91, 0xdd, 0x43, 0xd7, 0xe1, 0x24, 0x2d, 0x05, 0x1b, 0x8b, 0xda, 0x56,
		0xc6, 0xa6, 0x00, 0x63, 0x8a, 0x1b, 0x91, 0x6f, 0xbd, 0x6a, 0x9b, 0x94, 0x7f, 0x53, 0x61, 0xa5,
		0x24, 0xe1, 0xc8, 0x0e, 0xb6, 0x70, 0xa9, 0x99, 0x3e, 0x5c, 0x45, 0xbb, 0x4f, 0x4e, 0xc4, 0x1e,
		0x18, 0xe3, 0xd7, 0x75, 0x12, 0x4e, 0xf9, 0xe8, 0xa6, 0x47, 0x63, 0x24, 0xe8, 0xe0, 0x2d, 0x5d,
		0xf7, 0xa6, 0xc5, 0x43, 0x49, 0x78, 0xe3, 0x7f, 0x85, 0x36, 0x0d, 0xa9, 0xfd, 0xd3, 0x6b, 0xed,
		0x20, 0x6e, 0xe9, 0x3c, 0xaa, 0x2d, 0x1f, 0x89, 0xe4, 0x6b, 0xf9, 0xdc, 0xcc, 0xcf, 0x9e, 0xc6,
		0xfc, 0xf2, 0x0a, 0x19, 0x7a, 0x99, 0x5c, 0xac, 0x90, 0x77, 0xa5, 0x6f, 0x72, 0x10, 0x77, 0x00,
		0x06, 0x8b, 0x58, 0x90, 0x70, 0x6c, 0x24, 0x12, 0x16, 0xe5, 0x16, 0xd8, 0x7f, 0xbf, 0xe2, 0x27,
		0x3b, 0x6f, 0x9a, 0x73, 0xf8, 0x32, 0x7f, 0xe7, 0xfb, 0x39, 0xc8, 0xbf, 0x41, 0x7e, 0x0d, 0xf0,
		0x67, 0x88, 0x1f, 0x43, 0xfc, 0x57, 0xd8, 0x6f, 0x85, 0xfc, 0x15, 0xe8, 0xa7, 0xa2, 0xa3, 0x54,
		0xe3, 0x87, 0x60, 0xff, 0x2b, 0x79, 0x4d, 0xa0, 0xcb, 0x15, 0xdf, 0x63, 0xfb, 0xb4, 0xb9, 0x27,
		0x35, 0xec, 0x60, 0x7f, 0x2b, 0xd4, 0xf6, 0x44, 0x82, 0x60, 0xf7, 0xee, 0x15, 0x67, 0x5b, 0x55,
		0x4e, 0x79, 0x79, 0x53, 0x5a, 0xa0, 0xca, 0xb9, 0xce, 0x41, 0xc0, 0x13, 0x4e, 0xb0, 0x53, 0xc0,
		0x55, 0xc6, 0x7c, 0x0f, 0xa8, 0x3a, 0xeb, 0xc9, 0xb0, 0x03, 0xd3, 0xb1, 0xeb, 0xa3, 0x26, 0x6b,
		0x56, 0xc5, 0x7a, 0xdc, 0xdc, 0xba, 0xb6, 0x06, 0x01, 0xa9, 0x35, 0x08, 0xca, 0xd0, 0xa1, 0x4c,
		0x24, 0x5c, 0x21, 0x10, 0x66, 0x1f, 0x71, 0x99, 0xb8, 0x18, 0xc5, 0xd4, 0xce, 0xd3, 0x37, 0x96,
		0x5b, 0x10, 0x0b, 0xf0, 0x7f, 0x38, 0x40, 0x0e, 0x32, 0x05, 0x1f, 0x50, 0x6a, 0x8c, 0xbb, 0xe6,
		0x3d, 0x31, 0xa7, 0x0f, 0xe6, 0xe3, 0xe4, 0xad, 0x1f, 0x5f, 0x8d, 0x8a, 0x7f, 0x5f, 0xbf, 0x0d,
		0xe3, 0x6a, 0x3b, 0x4c, 0xa0, 0xd0, 0x77, 0x53, 0xea, 0xd5, 0x2b, 0x44, 0xaa, 0xf7, 0x6b, 0x5e,
		0x9e, 0x86, 0x9e, 0x7d, 0x0a, 0x9e, 0x1d, 0xb1, 0xd0, 0xf1, 0x66, 0xaa, 0x4e, 0xfd, 0x89, 0x7a,
		0xb3, 0x94, 0x00, 0xf9, 0x3e, 0x0d, 0x48, 0x6d, 0x45, 0x6a, 0x41, 0x82, 0x85, 0x89, 0xed, 0xc1,
		0x0e, 0xc0, 0xf6, 0x12, 0x45, 0x06, 0xc8, 0xe9, 0x95, 0x22, 0x35, 0x19, 0xd9, 0x57, 0xbc, 0x1b,
		0x34, 0xf8, 0x8e, 0x92, 0xf9, 0xbf, 0x0a, 0x28, 0xcd, 0x49, 0x68, 0xbf, 0x90, 0x10, 0x80, 0x4a,
		0x9b, 0x96, 0x08, 0x4b, 0x08, 0x4b, 0x08, 0x4b, 0x08, 0x4b, 0x4d, 0xc2, 0x52, 0x2a, 0x0c, 0x9a,
		0x12, 0x8b, 0x46, 0xf5, 0xc0, 0x94, 0x6b, 0xcb, 0x87, 0xa6, 0x1e, 0x42, 0xd3, 0xe1, 0xa1, 0xa9,
		0xee, 0x40, 0xdf, 0xb4, 0x4c, 0x03, 0x00, 0x81, 0xdc, 0x01, 0xbd, 0x69, 0xfb, 0x9a, 0xb7, 0x82,
		0xc5, 0x11, 0x78, 0x29, 0x5a, 0x64, 0xe9, 0x59, 0x72, 0x77, 0xb2, 0xe8, 0xc2, 0xb2, 0xf4, 0x42,
		0xb2, 0xf4, 0xc2, 0xb1, 0xfc, 0xee, 0x62, 0xb5, 0xf2, 0x3e, 0x78, 0xd9, 0x77, 0x63, 0x79, 0x97,
		0x92, 0x69, 0x48, 0x41, 0x56, 0x5f, 0x63, 0x03, 0x40, 0xf7, 0x9c, 0x4c, 0x31, 0xf7, 0x8a, 0x51,
		0xa3, 0x75, 0x0d, 0x34, 0x1a, 0x6d, 0x0a, 0x8e, 0xb2, 0x75, 0x5c, 0x0e, 0x5e, 0xd8, 0x34, 0xb2,
		0x42, 0x27, 0x00, 0xad, 0x71, 0x6c, 0x27, 0x92, 0xb9, 0x8b, 0x30, 0x5e, 0x30, 0x5e, 0xe4, 0xb3,
		0x42, 0x91, 0xec, 0x50, 0x34, 0x4b, 0x84, 0x67, 0x8b, 0x52, 0x59, 0xa3, 0x64, 0x6a, 0xb5, 0x97,
		0x62, 0xdd, 0x0a, 0x5e, 0xa7, 0xb0, 0x92, 0x2e, 0xa2, 0x01, 0x93, 0x11, 0x22, 0xa8, 0x9a, 0x42,
		0x78, 0x5f, 0x9c, 0x92, 0x31, 0x34, 0x2d, 0x31, 0x4f, 0x1a, 0x40, 0x65, 0x6e, 0x3d, 0x6f, 0x2f,
		0xca, 0x38, 0x45, 0x3d, 0xc4, 0x61, 0xc4, 0x61, 0xc4, 0x61, 0x9d, 0xb3, 0xf9, 0x4b, 0xc0, 0xe1,
		0xbb, 0x01, 0xc2, 0x70, 0x0a, 0xc3, 0xb0, 0x5d, 0xc2, 0x5b, 0x20, 0x86, 0x6c, 0x06, 0x46, 0x28,
		0xbe, 0x68, 0x28, 0x86, 0x9e, 0x6b, 0x21, 0x70, 0x8e, 0x85, 0xa0, 0x10, 0xf8, 0x9d, 0xe3, 0x70,
		0x17, 0x71, 0xf8, 0x32, 0xf3, 0x61, 0x19, 0xf1, 0x21, 0x17, 0x71, 0x51, 0x79, 0x88, 0xca, 0xc3,
		0x7c, 0x3b, 0x88, 0xf2, 0xcb, 0x0e, 0xa2, 0x4e, 0x6d, 0xe1, 0xbf, 0x0d, 0xd3, 0x82, 0x7d, 0x08,
		0xa2, 0xa7, 0x5f, 0xb6, 0x7d, 0xe9, 0xd4, 0x20, 0x96, 0x4b, 0x39, 0x50, 0x82, 0x78, 0x3e, 0x12,
		0xc4, 0x7d, 0x0d, 0x20, 0xdc, 0xeb, 0x20, 0x02, 0xc4, 0x67, 0x1a, 0x46, 0x65, 0x0f, 0xb8, 0x19,
		0xb8, 0x75, 0x83, 0x5d, 0x71, 0x1d, 0x9d, 0x92, 0xa5, 0x9b, 0x1a, 0xac, 0x5f, 0x21, 0x52, 0xec,
		0xa2, 0x48, 0xb1, 0xde, 0x47, 0x2a, 0x33, 0xc7, 0xda, 0x4c, 0x91, 0x93, 0x19, 0xd6, 0x64, 0x82,
		0x7c, 0x12, 0x04, 0x2c, 0x1a, 0xc2, 0x66, 0x2e, 0xc0, 0x4c, 0x4e, 0x24, 0x59, 0x89, 0xf9, 0x94,
		0xac, 0xfd, 0xd1, 0x6b, 0x33, 0x2f, 0xa1, 0x87, 0x07, 0x82, 0xca, 0x04, 0x12, 0xb6, 0x2e, 0xf1,
		0x38, 0xca, 0xe1, 0xec, 0x6b, 0xd4, 0x0e, 0xeb, 0xd7, 0x0e, 0x2f, 0xc8, 0xb7, 0xa7, 0xb9, 0x1f,
		0x31, 0x80, 0x70, 0x60, 0xdb, 0xb4, 0x6a, 0xed, 0x3a, 0x87, 0xa1, 0xc3, 0x21, 0x0a, 0x9f, 0x4e,
		0x59, 0xf8, 0x54, 0xbb, 0xf3, 0x17, 0xb0, 0xc3, 0x17, 0x38, 0x81, 0x7f, 0x27, 0xb2, 0xa7, 0xee,
		0x05, 0xc8, 0x9e, 0xe0, 0x3b, 0x5e, 0x4f, 0x45, 0xf9, 0x04, 0x93, 0x88, 0xa3, 0x3e, 0xfc, 0xd4,
		0xf1, 0x08, 0x85, 0x98, 0xe7, 0x89, 0x48, 0x67, 0x26, 0xc4, 0x7c, 0x86, 0x6c, 0xc4, 0x7a, 0xc6,
		0x6d, 0x58, 0x98, 0x1c, 0x61, 0x72, 0x84, 0xc9, 0x91, 0x56, 0x34, 0x82, 0xd4, 0x57, 0xf7, 0x91,
		0x07, 0x6b, 0xab, 0xe7, 0x53, 0x5b, 0x2d, 0xab, 0x92, 0x00, 0xab, 0xab, 0x7f, 0xa6, 0x97, 0x56,
		0x15, 0x6a, 0x5a, 0xb9, 0x27, 0xae, 0x7a, 0x52, 0xc3, 0x89, 0x1e, 0xc9, 0x57, 0xfa, 0xbb, 0xef,
		0xef, 0xdb, 0x70, 0xf7, 0xe9, 0x8d, 0xfc, 0x57, 0x85, 0x67, 0xfb, 0x40, 0x9f, 0x1d, 0x6b, 0xa5,
		0x08, 0x8e, 0x5b, 0xf1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa6,
		0x11, 0x28, 0xe9, 0xb9, 0x07, 0x01, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/acls/acle/match/ethacl/ethertype": []reflect.Type{
		reflect.TypeOf((E_FaucetConfiguration_Acls_Acle_Match_Ethacl_Ethertype)(0)),
	},
}

